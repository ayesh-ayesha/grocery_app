// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/favorites.dart';
import 'models/orders.dart';
import 'models/products.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2067878045125468336),
    name: 'Product',
    lastPropertyId: const obx_int.IdUid(9, 2963977440881903999),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8279702216248258947),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7283358934835874360),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 845179828956578944),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9127917526394821930),
        name: 'actualPrize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 76033304467859272),
        name: 'discountedPrize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8002579880985621239),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6300506165652236473),
        name: 'isAddedToCart',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2692639623226008028),
        name: 'isFavorite',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3499937500791443203),
    name: 'OrderItem',
    lastPropertyId: const obx_int.IdUid(10, 6819725083370212351),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9035595199051737030),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8035940731338904357),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1519776434447833990),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2683343259845113336),
        name: 'actualPrize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7400401718070679369),
        name: 'quantity',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6819725083370212351),
        name: 'isAddedToCart',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 246015632503307283),
    name: 'FavoritesItem',
    lastPropertyId: const obx_int.IdUid(9, 7002934822541372137),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2746729393662225669),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7975196440474491841),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1746805467157796216),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7229261267860940555),
        name: 'actualPrize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5627866817103110741),
        name: 'discountedPrize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1961510706600048426),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4217789775671337362),
        name: 'quantity',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8699147391100723676),
        name: 'isAddedToCart',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7002934822541372137),
        name: 'isFavorite',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 246015632503307283),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [7813487574252730154],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      2963977440881903999,
      4151733824683546849,
      7329016070742040395,
      2352147030617486617,
      7944810067322722573,
      7523569418136182728,
      809280364718660254,
      8344881006455304192,
      1219453179368717331,
      4169809050226406704,
      8145586732970279578,
      2204302931265889301,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Product: obx_int.EntityDefinition<Product>(
      model: _entities[0],
      toOneRelations: (Product object) => [],
      toManyRelations: (Product object) => {},
      getId: (Product object) => object.id,
      setId: (Product object, int id) {
        object.id = id;
      },
      objectToFB: (Product object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final imageOffset = fbb.writeString(object.image);
        final categoryOffset = fbb.writeString(object.category);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, imageOffset);
        fbb.addInt64(3, object.actualPrize);
        fbb.addInt64(4, object.discountedPrize);
        fbb.addOffset(5, categoryOffset);
        fbb.addBool(6, object.isAddedToCart);
        fbb.addBool(7, object.isFavorite);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final actualPrizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final discountedPrizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final isAddedToCartParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final isFavoriteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final object = Product(
          id: idParam,
          name: nameParam,
          image: imageParam,
          actualPrize: actualPrizeParam,
          discountedPrize: discountedPrizeParam,
          category: categoryParam,
          isAddedToCart: isAddedToCartParam,
          isFavorite: isFavoriteParam,
        );

        return object;
      },
    ),
    OrderItem: obx_int.EntityDefinition<OrderItem>(
      model: _entities[1],
      toOneRelations: (OrderItem object) => [],
      toManyRelations: (OrderItem object) => {},
      getId: (OrderItem object) => object.id,
      setId: (OrderItem object, int id) {
        object.id = id;
      },
      objectToFB: (OrderItem object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final imageOffset = fbb.writeString(object.image);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, imageOffset);
        fbb.addInt64(3, object.actualPrize);
        fbb.addInt64(6, object.quantity);
        fbb.addBool(9, object.isAddedToCart);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final actualPrizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final quantityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final isAddedToCartParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          22,
          false,
        );
        final object = OrderItem(
          id: idParam,
          name: nameParam,
          image: imageParam,
          actualPrize: actualPrizeParam,
          quantity: quantityParam,
          isAddedToCart: isAddedToCartParam,
        );

        return object;
      },
    ),
    FavoritesItem: obx_int.EntityDefinition<FavoritesItem>(
      model: _entities[2],
      toOneRelations: (FavoritesItem object) => [],
      toManyRelations: (FavoritesItem object) => {},
      getId: (FavoritesItem object) => object.id,
      setId: (FavoritesItem object, int id) {
        object.id = id;
      },
      objectToFB: (FavoritesItem object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final imageOffset = fbb.writeString(object.image);
        final categoryOffset = fbb.writeString(object.category);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, imageOffset);
        fbb.addInt64(3, object.actualPrize);
        fbb.addInt64(4, object.discountedPrize);
        fbb.addOffset(5, categoryOffset);
        fbb.addInt64(6, object.quantity);
        fbb.addBool(7, object.isAddedToCart);
        fbb.addBool(8, object.isFavorite);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final actualPrizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final discountedPrizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final quantityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final isAddedToCartParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final isFavoriteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final object = FavoritesItem(
          id: idParam,
          name: nameParam,
          image: imageParam,
          actualPrize: actualPrizeParam,
          discountedPrize: discountedPrizeParam,
          category: categoryParam,
          quantity: quantityParam,
          isAddedToCart: isAddedToCartParam,
          isFavorite: isFavoriteParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.id].
  static final id = obx.QueryIntegerProperty<Product>(
    _entities[0].properties[0],
  );

  /// See [Product.name].
  static final name = obx.QueryStringProperty<Product>(
    _entities[0].properties[1],
  );

  /// See [Product.image].
  static final image = obx.QueryStringProperty<Product>(
    _entities[0].properties[2],
  );

  /// See [Product.actualPrize].
  static final actualPrize = obx.QueryIntegerProperty<Product>(
    _entities[0].properties[3],
  );

  /// See [Product.discountedPrize].
  static final discountedPrize = obx.QueryIntegerProperty<Product>(
    _entities[0].properties[4],
  );

  /// See [Product.category].
  static final category = obx.QueryStringProperty<Product>(
    _entities[0].properties[5],
  );

  /// See [Product.isAddedToCart].
  static final isAddedToCart = obx.QueryBooleanProperty<Product>(
    _entities[0].properties[6],
  );

  /// See [Product.isFavorite].
  static final isFavorite = obx.QueryBooleanProperty<Product>(
    _entities[0].properties[7],
  );
}

/// [OrderItem] entity fields to define ObjectBox queries.
class OrderItem_ {
  /// See [OrderItem.id].
  static final id = obx.QueryIntegerProperty<OrderItem>(
    _entities[1].properties[0],
  );

  /// See [OrderItem.name].
  static final name = obx.QueryStringProperty<OrderItem>(
    _entities[1].properties[1],
  );

  /// See [OrderItem.image].
  static final image = obx.QueryStringProperty<OrderItem>(
    _entities[1].properties[2],
  );

  /// See [OrderItem.actualPrize].
  static final actualPrize = obx.QueryIntegerProperty<OrderItem>(
    _entities[1].properties[3],
  );

  /// See [OrderItem.quantity].
  static final quantity = obx.QueryIntegerProperty<OrderItem>(
    _entities[1].properties[4],
  );

  /// See [OrderItem.isAddedToCart].
  static final isAddedToCart = obx.QueryBooleanProperty<OrderItem>(
    _entities[1].properties[5],
  );
}

/// [FavoritesItem] entity fields to define ObjectBox queries.
class FavoritesItem_ {
  /// See [FavoritesItem.id].
  static final id = obx.QueryIntegerProperty<FavoritesItem>(
    _entities[2].properties[0],
  );

  /// See [FavoritesItem.name].
  static final name = obx.QueryStringProperty<FavoritesItem>(
    _entities[2].properties[1],
  );

  /// See [FavoritesItem.image].
  static final image = obx.QueryStringProperty<FavoritesItem>(
    _entities[2].properties[2],
  );

  /// See [FavoritesItem.actualPrize].
  static final actualPrize = obx.QueryIntegerProperty<FavoritesItem>(
    _entities[2].properties[3],
  );

  /// See [FavoritesItem.discountedPrize].
  static final discountedPrize = obx.QueryIntegerProperty<FavoritesItem>(
    _entities[2].properties[4],
  );

  /// See [FavoritesItem.category].
  static final category = obx.QueryStringProperty<FavoritesItem>(
    _entities[2].properties[5],
  );

  /// See [FavoritesItem.quantity].
  static final quantity = obx.QueryIntegerProperty<FavoritesItem>(
    _entities[2].properties[6],
  );

  /// See [FavoritesItem.isAddedToCart].
  static final isAddedToCart = obx.QueryBooleanProperty<FavoritesItem>(
    _entities[2].properties[7],
  );

  /// See [FavoritesItem.isFavorite].
  static final isFavorite = obx.QueryBooleanProperty<FavoritesItem>(
    _entities[2].properties[8],
  );
}
